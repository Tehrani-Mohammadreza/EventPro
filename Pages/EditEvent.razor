@page "/edit-event/{id:int}"
@inject EventService EventService
@inject NavigationManager NavigationManager

<div class="form-container">
    <h3>Edit Event</h3>

    @* Show error message if any *@
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="error-message">@errorMessage</div>
    }

    @* Display loading message if the event is not loaded yet *@
    @if (existingEvent == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <EditForm Model="@existingEvent" OnValidSubmit="UpdateEvent">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="name">Event Name</label>
                <input id="name" @bind="existingEvent.Name" placeholder="Event Name" required />
            </div>
            <div class="form-group">
                <label for="description">Description</label>
                <textarea id="description" @bind="existingEvent.Description" placeholder="Description" required></textarea>
            </div>
            <div class="form-group">
                <label for="date">Date</label>
                <input id="date" @bind="existingEvent.Date" type="datetime-local" required />
            </div>
            <div class="form-group">
                <label for="location">Location</label>
                <input id="location" @bind="existingEvent.Location" placeholder="Location" required />
            </div>

            <button type="submit" class="submit-button">Update Event</button>
        </EditForm>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private Event existingEvent;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            existingEvent = await EventService.GetEventAsync(Id);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading event: {ex.Message}";
        }
    }

    private async Task UpdateEvent()
    {
        try
        {
            await EventService.UpdateEventAsync(existingEvent);
            NavigationManager.NavigateTo("/events");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating event: {ex.Message}";
        }
    }
}
