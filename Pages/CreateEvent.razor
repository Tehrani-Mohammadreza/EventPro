@page "/create-event"
@inject EventService EventService
@inject NavigationManager NavigationManager

<div class="form-container">
    <h3>Create Event</h3>

    @* Show error message if any *@
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="error-message">@errorMessage</div>
    }

    <EditForm Model="@newEvent" OnValidSubmit="HandleCreateEvent">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name">Event Name</label>
            <input id="name" @bind="newEvent.Name" placeholder="Event Name" required />
        </div>
        <div class="form-group">
            <label for="description">Description</label>
            <textarea id="description" @bind="newEvent.Description" placeholder="Description" required></textarea>
        </div>
        <div class="form-group">
            <label for="date">Date</label>
            <input id="date" @bind="newEvent.Date" type="datetime-local" required />
        </div>
        <div class="form-group">
            <label for="location">Location</label>
            <input id="location" @bind="newEvent.Location" placeholder="Location" required />
        </div>

        <button type="submit" class="submit-button">Save Event</button>
    </EditForm>
</div>

@code {
    private Event newEvent = new Event();
    private string errorMessage;

    private async Task HandleCreateEvent()
    {
        try
        {
            await EventService.AddEventAsync(newEvent);
            NavigationManager.NavigateTo("/events");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error creating event: {ex.Message}";
        }
    }
}
